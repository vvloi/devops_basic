name: Spring Boot Service CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'spring-boot-service/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'spring-boot-service/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}-service
  JAVA_VERSION: '17'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: |
          cd spring-boot-service
          mvn clean install -DskipTests

      - name: Run tests
        run: |
          cd spring-boot-service
          mvn test

      - name: Generate test coverage report
        run: |
          cd spring-boot-service
          mvn jacoco:report

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: spring-boot-service/target/surefire-reports/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: spring-boot-service/target/site/jacoco/

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build application
        run: |
          cd spring-boot-service
          mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./spring-boot-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  update-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tag in deployment manifest
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-push-image.outputs.image-tag }}" | head -n 1)
          sed -i "s|image:.*|image: ${IMAGE_TAG}|g" phase\ 4/k8s-manifests/spring-boot-service/deployment.yaml

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add phase\ 4/k8s-manifests/spring-boot-service/deployment.yaml
          git diff --staged --quiet || git commit -m "Update Spring Boot service image to ${{ needs.build-and-push-image.outputs.image-tag }}"
          git push

  sync-argocd:
    name: Trigger ArgoCD Sync
    runs-on: ubuntu-latest
    needs: update-manifests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Sync ArgoCD Application
        run: |
          # Optional: Trigger ArgoCD sync via API
          # This requires ARGOCD_TOKEN secret to be configured
          if [ -n "${{ secrets.ARGOCD_TOKEN }}" ]; then
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
              -H "Content-Type: application/json" \
              https://argocd.example.com/api/v1/applications/spring-boot-service/sync
          else
            echo "ARGOCD_TOKEN not configured. ArgoCD will auto-sync based on its configuration."
          fi
